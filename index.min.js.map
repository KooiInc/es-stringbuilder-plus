{
  "version": 3,
  "sources": ["index.js"],
  "sourcesContent": ["\"use strict\";\r\nconst natives =  getNativeStringMethodKeys();\r\nconst interpolate = interpolateFactory();\r\nconst userExtensions = {};\r\nlet forTest = false;\r\n\r\nObject.defineProperties(StringBuilder, {\r\n  describe: { get() { return descriptionsGetter(); } },\r\n  hasUserExtensions: { get() { return Object.keys(userExtensions).length > 0; } },\r\n  addExtension: { value: addUserExtension },\r\n  removeUsrExtension: { value: removeUserExtension },\r\n  removeAllUsrExtensions: { get() { return (removeAllUserExtensions(), true); } }\r\n});\r\n\r\nexport { StringBuilder as default };\r\n\r\nfunction StringBuilder(str, ...args) {\r\n  const instanceValue = byContract(str, ...args);\r\n  const values = {initialValue: instanceValue, forTest: false, instanceValue,};\r\n  return Object.freeze(instantiate(values));\r\n}\r\n\r\nfunction instantiate(values) {\r\n  const instance = {\r\n    get length() { return instance.value.length; },\r\n    get initial() { return values.initialValue; },\r\n    get value() { return String(values.instanceValue); },\r\n    set value(v) { instance.is(v); },\r\n    set test(v) { forTest = v; },\r\n    get reset() { return instance.is(values.initialValue); },\r\n    get clear() { return instance.is(``); },\r\n    get empty() { return instance.is(``); },\r\n    get clone() { return StringBuilder`${instance.value}`; },\r\n    get toUpper() { return instance.is(instance.value.toUpperCase()); },\r\n    get toLower() { return instance.is(instance.value.toLowerCase()); },\r\n    get firstUp() { return instance.is(ucFirst(instance.value)); },\r\n    get wordsUp() { return instance.is(wordsFirstUp(instance.value)); },\r\n    get toDashed() { return instance.is(toDashedNotation(instance.value)); },\r\n    get toCamel() { return instance.is(toCamelcase(instance.value)); },\r\n    get reverse() { return instance.is([...instance.value].reverse().join(``)); },\r\n    cloneWith(newValue, ...args) { return instance.clone.is(newValue, ...args); },\r\n    quot4Print(quotes = `\",\"`) { return quot(instance.value, quotes); },\r\n    is(newValue, ...args) { values.instanceValue = byContract(newValue, ...args) ?? instance.value; return instance; },\r\n    as(newValue, ...args) { return instance.is(newValue, ...args); },\r\n    quot(quotes = `\"`) { return instance.is(quot(instance.value, quotes)); },\r\n    surroundWith({l = ``, r = ``} = {}) { return instance.is(quot(instance.value, l.concat(`,${r}`))); },\r\n    indexOf(...args) { return  indexOf(instance.value, ...args); },\r\n    lastIndexOf(...args) { return lastIndexOf(instance.value, ...args); },\r\n    toString() { return instance.value; },\r\n    valueOf() { return instance.value; },\r\n    prepend(str2Prepend, ...args) {\r\n      return instance.is( (str2Prepend.value ?? byContract(str2Prepend, args)).concat(instance.value) ); },\r\n    append(str2Append, ...args) {\r\n      return instance.is(instance.value.concat(str2Append.value ?? byContract(str2Append, ...args)) ); },\r\n    truncate(at, { html = false, wordBoundary = false } = {} ) {\r\n      return instance.is(truncate(instance.value, {at, html, wordBoundary})); },\r\n    remove(start, end) { return instance.is(remove(instance.value, start, end)); },\r\n    interpolate(...replacementTokens) { return instance.is(interpolate(instance.value, ...replacementTokens)); },\r\n  };\r\n  reRouteUserDefined(instance, values);\r\n  \r\n  return reRouteNatives(instance, values);\r\n}\r\n\r\nfunction reRouteUserDefined(instance) {\r\n  Object.entries(Object.getOwnPropertyDescriptors(userExtensions))\r\n    .forEach( ([key, meth]) => {\r\n        const getOrValue = meth.value.length === 1 ? `get` : `value`;\r\n        Object.defineProperty( instance, key, { [getOrValue]: (...args) => {\r\n            const nwValue = meth.value(instance, ...args);\r\n            \r\n            return meth.value.clone\r\n              ? instance.cloneWith(nwValue?.value ?? nwValue)\r\n              : instance.is(nwValue?.value ?? nwValue);\r\n          }\r\n        } );\r\n      }\r\n    );\r\n}\r\n\r\nfunction reRouteNatives(instance, values) {\r\n  natives.chainable.forEach( key =>\r\n    instance[key] = Object.getOwnPropertyDescriptor(String.prototype, key)?.value.length\r\n      ? function(...args) { return instance.is(values.instanceValue[key]?.(...args)); }\r\n      : function() { return instance.is(values.instanceValue[key]?.()); } );\r\n  natives.valueReturn.forEach( key => {\r\n    const isFn = Object.getOwnPropertyDescriptor(String.prototype, key)?.value;\r\n    if (!isFn) { return; }\r\n    instance[key] = isFn.length\r\n      ? function(...args) { return values.instanceValue[key]?.(...args); }\r\n      : function() { return values.instanceValue[key]?.(); }\r\n  });\r\n  \r\n  return instance;\r\n}\r\n\r\nfunction addUserExtension(name, fn, asClone = false) {\r\n  fn.clone = asClone;\r\n  userExtensions[name] = fn;\r\n}\r\n\r\nfunction removeUserExtension(name) {\r\n  if (name in userExtensions) {\r\n    delete userExtensions[name];\r\n  }\r\n}\r\n\r\nfunction removeAllUserExtensions() {\r\n  Object.keys(userExtensions).forEach(key => removeUserExtension(key));\r\n}\r\n\r\nfunction getExclusions() {\r\n  // notes:\r\n  // - trimLeft/-Right are redundant (use trimStart/-End),\r\n  // - indexOf and lastIndexOf are overridden.\r\n  return `anchor,big,blink,bold,fixed,fontcolor,fontsize,italics,link,small,\r\n          strike,sub,substr,sup,trimLeft,trimRight,indexOf,lastIndexOf`\r\n    .split(`,`)\r\n    .reduce( (acc, key) => ({...acc, [key.trim()]: true}), {});\r\n}\r\n\r\nfunction toCamelcase(str2Convert) {\r\n  return str2Convert.toLowerCase()\r\n    .trim()\r\n    .split(`-`)\r\n    .map( (v, i) => i && `${v[0].toUpperCase()}${v.slice(1)}` || v)\r\n    .join(``);\r\n}\r\n\r\nfunction toDashedNotation(str2Convert) {\r\n  return str2Convert\r\n    .replace(/[A-Z]./g, a => `-${a.toLowerCase()}`)\r\n    .replace(/^-|-$/, ``);\r\n}\r\n\r\nfunction ucFirst(value) {\r\n  const startSpaces = value.match(/^\\s+/);\r\n  value = value.trimStart();\r\n  return (startSpaces?.[0] ?? ``) + value[0].toUpperCase() + value.slice(1).toLowerCase();\r\n}\r\n\r\nfunction wordsFirstUp(str) {\r\n  str = str.toLowerCase().split(``);\r\n  let parsed = ``;\r\n  let prev;\r\n  \r\n  while (str.length) {\r\n    const chr = str.shift();\r\n    parsed += /\\p{L}/u.test(chr) && (!prev || !/\\p{L}|_/u.test(prev))\r\n      ? chr.toUpperCase() : chr;\r\n    prev = chr;\r\n  }\r\n  \r\n  return parsed;\r\n}\r\n\r\nfunction getNativeStringMethodKeys() {\r\n  const excluded = getExclusions();\r\n  const excludeFromChainRE = /^(at|charAt|codePointAt)$/i;\r\n  const allNativeStringDescriptors = Object.entries(Object.getOwnPropertyDescriptors(String.prototype));\r\n  const dummyStr = `abc`;\r\n  const checkReturnValue = (key, v) => v.value instanceof Function && typeof dummyStr[key]() || `n/a`;\r\n  \r\n  return {\r\n    chainable: allNativeStringDescriptors.filter( ([key, v]) =>\r\n        !excluded[key] && !excludeFromChainRE.test(key) && checkReturnValue(key, v) === `string` )\r\n      .map( ([key,]) => key ),\r\n    valueReturn: allNativeStringDescriptors.filter( ([key, v]) =>\r\n        !excluded[key] && (excludeFromChainRE.test(key) || checkReturnValue(key, v) !== `string`) )\r\n      .map( ([key,]) => key )\r\n  };\r\n}\r\n\r\nfunction quot(str, chr = `\",\"`) {\r\n  const [c1, c2] = chr.split(`,`);\r\n  return `${c1}${str}${c2 ?? c1}`;\r\n}\r\n\r\nfunction truncate( str, {at, html = false, wordBoundary = false} = {} ) {\r\n  if (!at || !(+at) || str.length <= at) { return str; }\r\n  let subString = str.slice(0, at);\r\n  const endsWith = html ? \"&hellip;\" : `...`;\r\n  const lastWordBoundary = [...subString.matchAll(/\\b([\\s'\".,?!;:)\\]])/g)]?.pop()?.index;\r\n  subString = wordBoundary ? subString.slice(0, lastWordBoundary) : subString;\r\n  return subString + endsWith;\r\n}\r\n\r\nfunction remove(str, start, end) {\r\n  return str.replace(str.slice(start || 0, end || str.length), ``);\r\n}\r\n\r\nfunction isStringOrTemplate(str) {\r\n  str = str?.constructor === Number ? String(str) : str;\r\n  return str?.constructor === String || str?.raw;\r\n}\r\n\r\nfunction byContract(str, ...args) {\r\n  const isMet = isStringOrTemplate(str);\r\n  if (!isMet && !forTest) { console.info(`\u2718 String contract not met: input [${\r\n    String(str)?.slice(0, 15) ?? `empty string`}] not a (template) string or number`); }\r\n  return String(!isMet ? `` : str.raw ? String.raw({ raw: str }, ...args) : str ?? ``);\r\n}\r\n\r\n// (last)indexOf should deliver undefined if nothing was found.\r\n// SEE https://youtu.be/99Zacm7SsWQ?t=2101\r\nfunction indexOf(str, findMe, fromIndex) {\r\n  if (findMe?.constructor === RegExp) {\r\n    return indexOfRE(str, findMe, fromIndex);\r\n  }\r\n  const index = str.indexOf(findMe, +fromIndex);\r\n  return index < 0 ? undefined : index;\r\n}\r\n\r\nfunction lastIndexOf(str, findMe, beforeIndex) {\r\n  if (findMe?.constructor === RegExp) {\r\n    return lastIndexOfRE(str, findMe, beforeIndex);\r\n  }\r\n  const index = `${str}`.lastIndexOf(findMe, +beforeIndex);\r\n  return index < 0 ? undefined : index;\r\n}\r\n\r\nfunction lastIndexOfRE(str, findMe, position) {\r\n  if (findMe?.constructor === RegExp) {\r\n    if (!findMe.global) {\r\n      findMe = RegExp(findMe, findMe.flags.concat(`g`));\r\n    }\r\n    const matches = str.matchAll(findMe);\r\n    return typeof position === `number` ?\r\n      [...matches]?.filter(m => m.index <= position)?.pop()?.index :\r\n      [...matches]?.pop()?.index;\r\n  }\r\n  \r\n  return undefined;\r\n}\r\n\r\nfunction indexOfRE(str, findRegExp, beforeIndex) {\r\n  if (findRegExp?.constructor === RegExp) {\r\n    if (!findRegExp.global) {\r\n      findRegExp = RegExp(findRegExp, findRegExp.flags.concat(`g`));\r\n    }\r\n    const matches = str.matchAll(findRegExp);\r\n    return typeof beforeIndex === `number` ?\r\n      [...matches]?.filter(m => m.index >= beforeIndex)?.[0]?.index :\r\n      [...matches]?.[0]?.index;\r\n  }\r\n  \r\n  return undefined;\r\n}\r\n\r\nfunction descriptionsGetter() {\r\n  const instanceProps = Object.entries(Object.getOwnPropertyDescriptors(StringBuilder``))\r\n    .filter( ([key, ]) => !/valueOf|toString/.test(key));\r\n  const userXtensions = Object.keys(userExtensions);\r\n  const allNatives = natives.chainable.concat(natives.valueReturn).filter( v => !/indexof/i.test(v) );\r\n  const allProps = {};\r\n  instanceProps\r\n    .forEach( ([key, descr]) => {\r\n      if (/name|prototype|test/i.test(key) || allNatives.find(nkey => key === nkey)) { return; }\r\n      const isValueReturn = /^(tostring|valueof|initial|length|indexof|lastindexof|clone|quot4Print)$/i.test(key);\r\n      const isMethod = !descr.get && !descr.set && descr.value instanceof Function;\r\n      const argsClause = isMethod ? descr.value.toString().match(/(\\(.+?\\))/)?.shift() ?? `()` : ``;\r\n      const methodStringified = String(descr.get ?? descr.value).replace(/\\s{2}/g, ` `).trim();\r\n      const isUserExtension = userXtensions.find(ky => ky === key);\r\n      const isChainable = isUserExtension || /return instance|^(empty|reset|is)/i.test(methodStringified);\r\n      allProps[key] = {callSign: `${key}${argsClause}`, getter: `get` in descr, setter: `set` in descr,\r\n        method: `value` in descr, override: /indexof/i.test(key), valueReturn: isValueReturn,\r\n        isUserExtension, isChainable, mutates: isChainable};\r\n    });\r\n    Object.defineProperty(allProps, `stringify`, {get() { return stringify(); } });\r\n    return allProps;\r\n    \r\n    function stringify() {\r\n      const result = [];\r\n      const checkFirst = (str) => /\\[[a-z]/i.test(str) ? `, ` : ``;\r\n      const propsFiltered = Object.entries(allProps)\r\n        .filter( ([key,]) => key !== `stringify` );\r\n      propsFiltered.forEach( ([, prop]) => {\r\n        let propStr = StringBuilder`${prop.callSign} [`;\r\n        if (prop.getter) { propStr.append(`${checkFirst(propStr)}getter`); }\r\n        if (prop.setter) { propStr.append(`${checkFirst(propStr)}setter`); }\r\n        if (prop.method) { propStr.append(`${checkFirst(propStr)}method`); }\r\n        if (prop.override) { propStr.append(`${checkFirst(propStr)}native override`); }\r\n        if (prop.isUserExtension) { propStr.append(`${checkFirst(propStr)}user extension`); }\r\n        if (prop.valueReturn) { propStr.append(`${checkFirst(propStr)}value return (not mutating)`); }\r\n        if (prop.isChainable) { propStr.append(`${checkFirst(propStr)}chainable (mutates)`); }\r\n        if (prop.mutates && !prop.isChainable) { propStr.append(`${checkFirst(propStr)}mutates`); }\r\n        result.push(propStr.append`]`.value);\r\n      });\r\n      \r\n      return result.sort( (a, b) => a.localeCompare(b) );\r\n    }\r\n}\r\n\r\nfunction interpolateFactory(defaultReplacer) {\r\n  return function(str, ...tokens) {\r\n    return interpolate(str, processTokens(tokens));\r\n  }\r\n  \r\n  function isStringOrNumber(v) {\r\n    return [String, Number].includes(v?.constructor);\r\n  }\r\n  \r\n  function isObject(v) {\r\n    return v?.constructor === Object;\r\n  }\r\n  \r\n  function invalidate(key) {\r\n    return String(defaultReplacer ?? `{${key}}`);\r\n  }\r\n  \r\n  function replacement(key, token) {\r\n    return isStringOrNumber(token[key]) ? String(token[key]) : invalidate(key);\r\n  }\r\n  \r\n  function getReplacerLambda(token) {\r\n    return (...args) => {\r\n      const keyArg = args.find(a => a.key);\r\n      return replacement(keyArg ? keyArg.key : `_`, token);\r\n    };\r\n  }\r\n  \r\n  function replace(str, token) {\r\n    return str.replace(/\\{(?<key>[a-z_\\d]+)}/gim, getReplacerLambda(token));\r\n  }\r\n  \r\n  function mergeTokens(obj) {\r\n    const entries = Object.entries(obj);\r\n    const [key, values] = entries.shift();\r\n    const merged = values.map(value => ({ [key]: value }));\r\n    \r\n    entries.forEach(([key, value]) => {\r\n      value.forEach((v, i) => {\r\n        merged[i][key] = `${v}`;\r\n      });\r\n    });\r\n    \r\n    return merged;\r\n  }\r\n  \r\n  function isMultiLineWithArrays(tokens) {\r\n    return tokens.length === 1 && Object.values(tokens[0]).every(Array.isArray);\r\n  }\r\n  \r\n  function processTokens(tokens) {\r\n    return isMultiLineWithArrays(tokens) ? mergeTokens(tokens[0]) : tokens;\r\n  }\r\n  \r\n  function interpolate(str, tokens) {\r\n    return tokens.flat()\r\n      .map(token => isObject(token) ? replace(str, token) : ``)\r\n      .join(``);\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["natives", "getNativeStringMethodKeys", "interpolate", "interpolateFactory", "userExtensions", "forTest", "StringBuilder", "descriptionsGetter", "addUserExtension", "removeUserExtension", "removeAllUserExtensions", "StringBuilder", "str", "args", "instanceValue", "byContract", "instantiate", "values", "instance", "v", "forTest", "ucFirst", "wordsFirstUp", "toDashedNotation", "toCamelcase", "newValue", "quotes", "quot", "l", "indexOf", "lastIndexOf", "str2Prepend", "str2Append", "at", "html", "wordBoundary", "truncate", "start", "end", "remove", "replacementTokens", "interpolate", "reRouteUserDefined", "reRouteNatives", "userExtensions", "key", "meth", "getOrValue", "nwValue", "natives", "isFn", "addUserExtension", "name", "fn", "asClone", "removeUserExtension", "removeAllUserExtensions", "getExclusions", "acc", "str2Convert", "i", "a", "value", "startSpaces", "parsed", "prev", "chr", "getNativeStringMethodKeys", "excluded", "excludeFromChainRE", "allNativeStringDescriptors", "dummyStr", "checkReturnValue", "c1", "c2", "subString", "endsWith", "lastWordBoundary", "isStringOrTemplate", "isMet", "findMe", "fromIndex", "indexOfRE", "index", "beforeIndex", "lastIndexOfRE", "position", "matches", "m", "findRegExp", "descriptionsGetter", "instanceProps", "userXtensions", "allNatives", "allProps", "descr", "nkey", "isValueReturn", "argsClause", "methodStringified", "isUserExtension", "ky", "isChainable", "stringify", "result", "checkFirst", "prop", "propStr", "b", "interpolateFactory", "defaultReplacer", "tokens", "processTokens", "isStringOrNumber", "isObject", "invalidate", "replacement", "token", "getReplacerLambda", "keyArg", "replace", "mergeTokens", "obj", "entries", "merged", "isMultiLineWithArrays"]
}
